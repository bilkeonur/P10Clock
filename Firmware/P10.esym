D G "__PCM__" 0 726 ""5.007""
D G "__DEVICE__" 0 726 "648"
D G "__DATE__" 0 726 ""02-May-22""
D G "__TIME__" 0 726 ""10:46:38"" "Standard Header file for the PIC16F648A device ////////////////"
c L "set_tris_a" 1 5 13 "FUNCTION"
v L "value" 1 28 "int8" `53 
f B "set_tris_a" 1 28 "void(int8 value)" `52 
v L "value" 1 29 "int8" `55 
f B "set_tris_b" 1 29 "void(int8 value)" `54 
f B "get_tris_a" 1 30 "int8()" `56 
f B "get_tris_b" 1 31 "int8()" `57 
v L "value" 1 32 "int8" `59 
f B "output_a" 1 32 "void(int8 value)" `58 
v L "value" 1 33 "int8" `61 
f B "output_b" 1 33 "void(int8 value)" `60 
f B "input_a" 1 34 "int8()" `62 
f B "input_b" 1 35 "int8()" `63 
f B "input_change_a" 1 36 "int8()" `64 
f B "input_change_b" 1 37 "int8()" `65 
v L "pin" 1 38 "int16" `67 
f B "input" 1 38 "int8(int16 pin)" `66 
v L "pin" 1 39 "int16" `69 
f B "input_state" 1 39 "int8(int16 pin)" `68 
v L "pin" 1 40 "int16" `71 
f B "output_low" 1 40 "void(int16 pin)" `70 
v L "pin" 1 41 "int16" `73 
f B "output_high" 1 41 "void(int16 pin)" `72 
v L "pin" 1 42 "int16" `75 
f B "output_toggle" 1 42 "void(int16 pin)" `74 
v L "pin" 1 43 "int16" `77 
v L "level" 1 43 "int8" `78 
f B "output_bit" 1 43 "void(int16 pin,int8 level)" `76 
v L "pin" 1 44 "int16" `80 
f B "output_float" 1 44 "void(int16 pin)" `79 
v L "pin" 1 45 "int16" `82 
f B "output_drive" 1 45 "void(int16 pin)" `81  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 49 "40"
d G "PIN_A1" 1 50 "41"
d G "PIN_A2" 1 51 "42"
d G "PIN_A3" 1 52 "43"
d G "PIN_A4" 1 53 "44"
d G "PIN_A5" 1 54 "45"
d G "PIN_A6" 1 55 "46"
d G "PIN_A7" 1 56 "47"
d G "PIN_B0" 1 58 "48"
d G "PIN_B1" 1 59 "49"
d G "PIN_B2" 1 60 "50"
d G "PIN_B3" 1 61 "51"
d G "PIN_B4" 1 62 "52"
d G "PIN_B5" 1 63 "53"
d G "PIN_B6" 1 64 "54"
d G "PIN_B7" 1 65 "55"
d G "FALSE" 1 68 "0"
d G "TRUE" 1 69 "1"
d G "BYTE" 1 71 "int8"
d G "BOOLEAN" 1 72 "int1"
d G "getc" 1 74 "getch"
d G "fgetc" 1 75 "getch"
d G "getchar" 1 76 "getch"
d G "putc" 1 77 "putchar"
d G "fputc" 1 78 "putchar"
d G "fgets" 1 79 "gets"
d G "fputs" 1 80 "puts"
c L "output_drive" 1 5 3 "FUNCTION"
f B "restart_cause" 1 85 "int8()" `83 
f B "reset_cpu" 1 86 "void()" `84 
f B "sleep" 1 87 "void()" `85  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 89 "3"
d G "WDT_TIMEOUT" 1 90 "11"
d G "MCLR_FROM_SLEEP" 1 91 "19"
d G "MCLR_FROM_RUN" 1 92 "27"
d G "NORMAL_POWER_UP" 1 93 "25"
d G "BROWNOUT_RESTART" 1 94 "26"
c L "sleep" 1 5 5 "FUNCTION"
v L "mode" 1 101 "int8" `87 
f B "setup_timer_0" 1 101 "void(int8 mode)" `86 
v L "value" 1 102 "int8" `89 
f B "set_timer0" 1 102 "void(int8 value)" `88 
f B "get_timer0" 1 103 "int8()" `90 
v L "mode" 1 104 "int8" `92 
v L "prescaler" 1 104 "int8" `93 
f B "setup_counters" 1 104 "void(int8 mode,int8 prescaler)" `91 
v L "value" 1 105 "int8" `95 
f B "set_rtcc" 1 105 "void(int8 value)" `94 
f B "get_rtcc" 1 106 "int8()" `96  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 108 "0"
d G "T0_EXT_L_TO_H" 1 109 "32"
d G "T0_EXT_H_TO_L" 1 110 "48"
d G "T0_DIV_1" 1 112 "8"
d G "T0_DIV_2" 1 113 "0"
d G "T0_DIV_4" 1 114 "1"
d G "T0_DIV_8" 1 115 "2"
d G "T0_DIV_16" 1 116 "3"
d G "T0_DIV_32" 1 117 "4"
d G "T0_DIV_64" 1 118 "5"
d G "T0_DIV_128" 1 119 "6"
d G "T0_DIV_256" 1 120 "7"
d G "T0_8_BIT" 1 123 "0"
d G "RTCC_INTERNAL" 1 125 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 126 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 127 "48"
d G "RTCC_DIV_1" 1 128 "8"
d G "RTCC_DIV_2" 1 129 "0"
d G "RTCC_DIV_4" 1 130 "1"
d G "RTCC_DIV_8" 1 131 "2"
d G "RTCC_DIV_16" 1 132 "3"
d G "RTCC_DIV_32" 1 133 "4"
d G "RTCC_DIV_64" 1 134 "5"
d G "RTCC_DIV_128" 1 135 "6"
d G "RTCC_DIV_256" 1 136 "7"
d G "RTCC_8_BIT" 1 137 "0"
c L "get_rtcc" 1 5 8 "FUNCTION"
v L "mode" 1 148 "int16" `98 
f B "setup_wdt" 1 148 "void(int16 mode)" `97 
f B "restart_wdt" 1 149 "void()" `99  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 152 "8"
d G "WDT_36MS" 1 153 "9"
d G "WDT_72MS" 1 154 "10"
d G "WDT_144MS" 1 155 "11"
d G "WDT_288MS" 1 156 "12"
d G "WDT_576MS" 1 157 "13"
d G "WDT_1152MS" 1 158 "14"
d G "WDT_2304MS" 1 159 "15"
c L "restart_wdt" 1 5 3 "FUNCTION"
v L "mode" 1 165 "int16" `101 
f B "setup_timer_1" 1 165 "void(int16 mode)" `100 
f B "get_timer1" 1 166 "int16()" `102 
v L "value" 1 167 "int16" `104 
f B "set_timer1" 1 167 "void(int16 value)" `103  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 170 "0"
d G "T1_INTERNAL" 1 171 "0x85"
d G "T1_EXTERNAL" 1 172 "0x87"
d G "T1_EXTERNAL_SYNC" 1 173 "0x83"
d G "T1_CLK_OUT" 1 175 "8"
d G "T1_DIV_BY_1" 1 177 "0"
d G "T1_DIV_BY_2" 1 178 "0x10"
d G "T1_DIV_BY_4" 1 179 "0x20"
d G "T1_DIV_BY_8" 1 180 "0x30"
c L "set_timer1" 1 5 3 "FUNCTION"
v L "mode" 1 185 "int8" `106 
v L "period" 1 185 "int8" `107 
v L "postscale" 1 185 "int8" `108 
f B "setup_timer_2" 1 185 "void(int8 mode,int8 period,int8 postscale)" `105 
f B "get_timer2" 1 186 "int8()" `109 
v L "value" 1 187 "int8" `111 
f B "set_timer2" 1 187 "void(int8 value)" `110  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 189 "0"
d G "T2_DIV_BY_1" 1 190 "4"
d G "T2_DIV_BY_4" 1 191 "5"
d G "T2_DIV_BY_16" 1 192 "6"
c L "set_timer2" 1 5 4 "FUNCTION"
v L "mode" 1 198 "int32" `113 
f B "setup_ccp1" 1 198 "void(int32 mode)" `112 
v L "mode" 1 199 "int32" `115 
v L "pwm" 1 199 "int8" `116 
f G "setup_ccp1" 1 199 "void(int32 mode,int8 pwm)" `114 
v L "value" 1 200 "int16" `118 
f B "set_pwm1_duty" 1 200 "void(int16 value)" `117  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 202 "0"
d G "CCP_CAPTURE_FE" 1 203 "4"
d G "CCP_CAPTURE_RE" 1 204 "5"
d G "CCP_CAPTURE_DIV_4" 1 205 "6"
d G "CCP_CAPTURE_DIV_16" 1 206 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 207 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 208 "9"
d G "CCP_COMPARE_INT" 1 209 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 210 "0xB"
d G "CCP_PWM" 1 211 "0xC"
d G "CCP_PWM_PLUS_1" 1 212 "0x1c"
d G "CCP_PWM_PLUS_2" 1 213 "0x2c"
d G "CCP_PWM_PLUS_3" 1 214 "0x3c"
c L "set_pwm1_duty" 1 5 2 "FUNCTION"
v L "baud" 1 220 "int32" `123 
f B "setup_uart" 1 220 "void(int32 baud)" `122 
v L "baud" 1 221 "int32" `125 
v L "stream" 1 221 "int8" `126 
f G "setup_uart" 1 221 "void(int32 baud,int8 stream)" `124 
v L "baud" 1 222 "int32" `128 
v L "stream" 1 222 "int8" `129 
v L "clock" 1 222 "int32" `130 
f G "setup_uart" 1 222 "void(int32 baud,int8 stream,int32 clock)" `127 
v L "baud" 1 223 "int32" `132 
f B "set_uart_speed" 1 223 "void(int32 baud)" `131 
v L "baud" 1 224 "int32" `134 
v L "stream" 1 224 "int8" `135 
f G "set_uart_speed" 1 224 "void(int32 baud,int8 stream)" `133 
v L "baud" 1 225 "int32" `137 
v L "stream" 1 225 "int8" `138 
v L "clock" 1 225 "int32" `139 
f G "set_uart_speed" 1 225 "void(int32 baud,int8 stream,int32 clock)" `136  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 229 "2"
d G "UART_DATA" 1 230 "4"
c L "set_uart_speed" 1 5 3 "FUNCTION"
v L "mode" 1 234 "int32" `141 
f B "setup_comparator" 1 234 "void(int32 mode)" `140  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A2" 1 236 "0xfff04"
d G "A0_A2_A1_A2" 1 237 "0x7ff03"
d G "NC_NC_A1_A2" 1 238 "0x6ff05"
d G "NC_NC_NC_NC" 1 239 "0x0ff07"
d G "A0_VR_A1_VR" 1 240 "0x3ff02"
d G "A3_VR_A2_VR" 1 241 "0xcff0A"
d G "A0_A2_A1_A2_OUT_ON_A3_A4" 1 242 "0x7e706"
d G "A3_A2_A1_A2" 1 243 "0xeff09"
d G "CP1_INVERT" 1 244 "0x00010"
d G "CP2_INVERT" 1 245 "0x00020"
c L "setup_comparator" 1 5 2 "FUNCTION"
v L "mode" 1 252 "int8" `145 
f B "setup_vref" 1 252 "void(int8 mode)" `144  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 254 "0xa0"
d G "VREF_HIGH" 1 255 "0x80"
d G "VREF_A2" 1 257 "0x40"
c L "setup_vref" 1 5 2 "FUNCTION"
v L "mode" 1 261 "int8" `147 
f B "setup_oscillator" 1 261 "void(int8 mode)" `146  "Constants used in setup_oscillator() are:"
d G "OSC_48KHZ" 1 263 "0"
d G "OSC_4MHZ" 1 264 "8"
c L "setup_oscillator" 1 5 3 "FUNCTION"
v L "x" 1 270 "sint8" `149 
f B "abs" 1 270 "sint8(sint8 x)" `148 
v L "x" 1 271 "sint16" `151 
f G "abs" 1 271 "sint16(sint16 x)" `150 
v L "x" 1 272 "sint32" `153 
f G "abs" 1 272 "sint32(sint32 x)" `152 
v L "x" 1 273 "float" `155 
f G "abs" 1 273 "float(float x)" `154 
v L "??65535" 1 274 "int8" `157 
v L "??65535" 1 274 "int8" `158 
f B "_mul" 1 274 "int16(int8 ,int8 )" `156 
v L "??65535" 1 275 "sint8" `157 
v L "??65535" 1 275 "sint8" `161 
f G "_mul" 1 275 "sint16(sint8 ,sint8 )" `159 
v L "??65535" 1 276 "int16" `157 
v L "??65535" 1 276 "int16" `164 
f G "_mul" 1 276 "int32(int16 ,int16 )" `162 
v L "??65535" 1 277 "sint16" `157 
v L "??65535" 1 277 "sint16" `167 
f G "_mul" 1 277 "sint32(sint16 ,sint16 )" `165  "Memory Manipulation Prototypes:"
v L "bank" 1 280 "int8" `169 
v L "offset" 1 280 "int8" `170 
f B "read_bank" 1 280 "int8(int8 bank,int8 offset)" `168 
v L "bank" 1 281 "int8" `172 
v L "offset" 1 281 "int8" `173 
v L "value" 1 281 "int8" `174 
f B "write_bank" 1 281 "void(int8 bank,int8 offset,int8 value)" `171 
v L "dest" 1 282 "*int8" `176 
v L "src" 1 282 "*int8" `177 
f B "strcpy" 1 282 "void(*int8 dest,*int8 src)" `175 
v L "dest" 1 283 "*int8" `179 
v L "src" 1 283 "*int8" `180 
f B "strcopy" 1 283 "void(*int8 dest,*int8 src)" `178 
v L "destination" 1 284 "*int8" `182 
v L "value" 1 284 "int8" `183 
v L "num" 1 284 "int16" `184 
f B "memset" 1 284 "void(*int8 destination,int8 value,int16 num)" `181 
v L "destination" 1 285 "*int8" `186 
v L "source" 1 285 "*int8" `187 
v L "num" 1 285 "int16" `188 
f B "memcpy" 1 285 "void(*int8 destination,*int8 source,int16 num)" `185  "String Prototypes:"
v L "cvalue" 1 288 "int8" `190 
f B "toupper" 1 288 "int8(int8 cvalue)" `189 
v L "cvalue" 1 289 "int8" `192 
f B "tolower" 1 289 "int8(int8 cvalue)" `191 
v L "string" 1 290 "*int8" `194 
v L "cstring" 1 290 "*int8" `195 
f B "sprintf" 1 290 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `193  "Data Manipulators Prototypes:"
v L "address" 1 293 "*int8" `198 
v L "bytes" 1 293 "int8" `199 
v L "value" 1 293 "int8" `200 
f B "shift_left" 1 293 "int8(*int8 address,int8 bytes,int8 value)" `197 
v L "address" 1 294 "*int8" `202 
v L "bytes" 1 294 "int8" `203 
v L "value" 1 294 "int8" `204 
f B "shift_right" 1 294 "int8(*int8 address,int8 bytes,int8 value)" `201 
v L "address" 1 295 "*int8" `206 
v L "bytes" 1 295 "int8" `207 
f B "rotate_left" 1 295 "void(*int8 address,int8 bytes)" `205 
v L "address" 1 296 "*int8" `209 
v L "bytes" 1 296 "int8" `210 
f B "rotate_right" 1 296 "void(*int8 address,int8 bytes)" `208 
v L "value" 1 297 "int8" `212 
f B "swap" 1 297 "void(int8 value)" `211 
v L "var" 1 298 "int16" `214 
v L "offset" 1 298 "int8" `215 
f B "make8" 1 298 "int8(int16 var,int8 offset)" `213 
v L "var" 1 299 "int32" `214 
v L "offset" 1 299 "int8" `218 
f G "make8" 1 299 "int8(int32 var,int8 offset)" `216 
v L "varhigh" 1 300 "int8" `220 
v L "varlow" 1 300 "int8" `221 
f B "make16" 1 300 "int16(int8 varhigh,int8 varlow)" `219 
v L "var1" 1 301 "int16" `223 
f B "make32" 1 301 "int32(int16 var1)" `222 
v L "var1" 1 302 "int16" `225 
v L "var2" 1 302 "int16" `226 
f G "make32" 1 302 "int32(int16 var1,int16 var2)" `224 
v L "var1" 1 303 "int16" `225 
v L "var2" 1 303 "int8" `229 
f G "make32" 1 303 "int32(int16 var1,int8 var2)" `227 
v L "var1" 1 304 "int16" `231 
v L "var2" 1 304 "int8" `232 
v L "var3" 1 304 "int8" `233 
f G "make32" 1 304 "int32(int16 var1,int8 var2,int8 var3)" `230 
v L "var1" 1 305 "int8" `235 
f G "make32" 1 305 "int32(int8 var1)" `234 
v L "var1" 1 306 "int8" `225 
v L "var2" 1 306 "int8" `238 
f G "make32" 1 306 "int32(int8 var1,int8 var2)" `236 
v L "var1" 1 307 "int8" `231 
v L "var2" 1 307 "int8" `232 
v L "var3" 1 307 "int8" `242 
f G "make32" 1 307 "int32(int8 var1,int8 var2,int8 var3)" `239 
v L "var1" 1 308 "int8" `244 
v L "var2" 1 308 "int8" `245 
v L "var3" 1 308 "int8" `246 
v L "var4" 1 308 "int8" `247 
f G "make32" 1 308 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `243 
v L "var1" 1 309 "int8" `225 
v L "var2" 1 309 "int16" `250 
f G "make32" 1 309 "int32(int8 var1,int16 var2)" `248 
v L "var1" 1 310 "int8" `231 
v L "var2" 1 310 "int16" `232 
v L "var3" 1 310 "int8" `254 
f G "make32" 1 310 "int32(int8 var1,int16 var2,int8 var3)" `251 
v L "var1" 1 311 "int8" `231 
v L "var2" 1 311 "int8" `232 
v L "var3" 1 311 "int16" `258 
f G "make32" 1 311 "int32(int8 var1,int8 var2,int16 var3)" `255 
v L "var" 1 312 "int8" `260 
v L "bit" 1 312 "int8" `261 
f B "bit_set" 1 312 "void(int8 var,int8 bit)" `259 
v L "var" 1 313 "int16" `260 
v L "bit" 1 313 "int8" `264 
f G "bit_set" 1 313 "void(int16 var,int8 bit)" `262 
v L "var" 1 314 "int32" `260 
v L "bit" 1 314 "int8" `267 
f G "bit_set" 1 314 "void(int32 var,int8 bit)" `265 
v L "var" 1 315 "int8" `269 
v L "bit" 1 315 "int8" `270 
f B "bit_clear" 1 315 "void(int8 var,int8 bit)" `268 
v L "var" 1 316 "int16" `269 
v L "bit" 1 316 "int8" `273 
f G "bit_clear" 1 316 "void(int16 var,int8 bit)" `271 
v L "var" 1 317 "int32" `269 
v L "bit" 1 317 "int8" `276 
f G "bit_clear" 1 317 "void(int32 var,int8 bit)" `274 
v L "var" 1 318 "int8" `278 
v L "bit" 1 318 "int8" `279 
f B "bit_test" 1 318 "int8(int8 var,int8 bit)" `277 
v L "var" 1 319 "int16" `278 
v L "bit" 1 319 "int8" `282 
f G "bit_test" 1 319 "int8(int16 var,int8 bit)" `280 
v L "var" 1 320 "int32" `278 
v L "bit" 1 320 "int8" `285 
f G "bit_test" 1 320 "int8(int32 var,int8 bit)" `283  "#use delay() Prototypes:"
v L "count" 1 323 "int8" `287 
f B "delay_cycles" 1 323 "void(int8 count)" `286 
v L "time" 1 324 "int16" `289 
f B "delay_ms" 1 324 "void(int16 time)" `288 
v L "time" 1 325 "int16" `291 
f B "delay_us" 1 325 "void(int16 time)" `290  "#use rs232() Prototypes:"
v L "cdata" 1 328 "int8" `293 
f B "putchar" 1 328 "void(int8 cdata)" `292 
v L "cdata" 1 329 "int8" `295 
v L "stream" 1 329 "int8" `296 
f G "putchar" 1 329 "void(int8 cdata,int8 stream)" `294 
v L "string" 1 330 "*int8" `298 
f B "puts" 1 330 "void(*int8 string)" `297 
v L "string" 1 331 "*int8" `300 
v L "stream" 1 331 "int8" `301 
f G "puts" 1 331 "void(*int8 string,int8 stream)" `299 
f B "getch" 1 332 "int8()" `302 
v L "stream" 1 333 "int8" `304 
f G "getch" 1 333 "int8(int8 stream)" `303 
v L "string" 1 334 "*int8" `306 
f B "gets" 1 334 "void(*int8 string)" `305 
v L "string" 1 335 "*int8" `308 
v L "stream" 1 335 "int8" `309 
f G "gets" 1 335 "void(*int8 string,int8 stream)" `307 
f B "kbhit" 1 336 "int8()" `310 
v L "stream" 1 337 "int8" `312 
f G "kbhit" 1 337 "int8(int8 stream)" `311 
v L "string" 1 338 "*int8" `314 
f B "printf" 1 338 "void(*int8 string,*int8 _VA_LIST)" `313 
v L "stream" 1 339 "int8" `317 
v L "string" 1 339 "*int8" `318 
f B "fprintf" 1 339 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `316 
f B "putc_send" 1 340 "void()" `320 
v L "stream" 1 341 "int8" `322 
f B "fputc_send" 1 341 "void(int8 stream)" `321 
f B "rcv_buffer_full" 1 342 "int8()" `323 
v L "stream" 1 343 "int8" `325 
f G "rcv_buffer_full" 1 343 "int8(int8 stream)" `324 
f B "rcv_buffer_bytes" 1 344 "int16()" `326 
v L "stream" 1 345 "int8" `328 
f G "rcv_buffer_bytes" 1 345 "int16(int8 stream)" `327 
f B "tx_buffer_full" 1 346 "int8()" `329 
v L "stream" 1 347 "int8" `331 
f G "tx_buffer_full" 1 347 "int8(int8 stream)" `330 
f B "tx_buffer_bytes" 1 348 "int16()" `332 
v L "stream" 1 349 "int8" `334 
f G "tx_buffer_bytes" 1 349 "int16(int8 stream)" `333  "#use i2c() Prototypes:"
f B "i2c_read" 1 352 "int8()" `335 
v L "stream" 1 353 "int8" `337 
f G "i2c_read" 1 353 "int8(int8 stream)" `336 
v L "stream" 1 354 "int8" `339 
v L "ack" 1 354 "int8" `340 
f G "i2c_read" 1 354 "int8(int8 stream,int8 ack)" `338 
v L "data" 1 355 "int8" `342 
f B "i2c_write" 1 355 "int8(int8 data)" `341 
v L "stream" 1 356 "int8" `344 
v L "data" 1 356 "int8" `345 
f G "i2c_write" 1 356 "int8(int8 stream,int8 data)" `343 
f B "i2c_start" 1 357 "void()" `346 
v L "stream" 1 358 "int8" `348 
f G "i2c_start" 1 358 "void(int8 stream)" `347 
v L "stream" 1 359 "int8" `350 
v L "restart" 1 359 "int8" `351 
f G "i2c_start" 1 359 "void(int8 stream,int8 restart)" `349 
f B "i2c_stop" 1 360 "void()" `352 
v L "stream" 1 361 "int8" `354 
f G "i2c_stop" 1 361 "void(int8 stream)" `353 
f B "i2c_isr_state" 1 362 "int8()" `355 
v L "addr" 1 363 "int8" `357 
f B "i2c_slaveaddr" 1 363 "void(int8 addr)" `356 
v L "stream" 1 364 "int8" `359 
v L "addr" 1 364 "int8" `360 
f G "i2c_slaveaddr" 1 364 "void(int8 stream,int8 addr)" `358 
f B "i2c_poll" 1 365 "int8()" `361 
v L "stream" 1 366 "int8" `363 
f G "i2c_poll" 1 366 "int8(int8 stream)" `362 
v L "baud" 1 367 "int32" `365 
f B "i2c_init" 1 367 "void(int32 baud)" `364 
v L "stream" 1 368 "int8" `367 
v L "baud" 1 368 "int32" `368 
f G "i2c_init" 1 368 "void(int8 stream,int32 baud)" `366  "#use spi() Prototypes:"
f B "spi_xfer" 1 371 "int8()" `369 
f G "spi_xfer" 1 372 "int16()" `370 
f G "spi_xfer" 1 373 "int32()" `371 
v L "data" 1 374 "int8" `373 
f G "spi_xfer" 1 374 "int8(int8 data)" `372 
v L "data" 1 375 "int16" `375 
f G "spi_xfer" 1 375 "int16(int16 data)" `374 
v L "data" 1 376 "int32" `377 
f G "spi_xfer" 1 376 "int32(int32 data)" `376 
v L "stream" 1 377 "int8" `379 
v L "data" 1 377 "int8" `380 
f G "spi_xfer" 1 377 "int8(int8 stream,int8 data)" `378 
v L "stream" 1 378 "int8" `379 
v L "data" 1 378 "int16" `383 
f G "spi_xfer" 1 378 "int16(int8 stream,int16 data)" `381 
v L "stream" 1 379 "int8" `379 
v L "data" 1 379 "int32" `386 
f G "spi_xfer" 1 379 "int32(int8 stream,int32 data)" `384 
v L "stream" 1 380 "int8" `388 
v L "data" 1 380 "int8" `389 
v L "bits" 1 380 "int8" `390 
f G "spi_xfer" 1 380 "int8(int8 stream,int8 data,int8 bits)" `387 
v L "stream" 1 381 "int8" `388 
v L "data" 1 381 "int16" `389 
v L "bits" 1 381 "int8" `394 
f G "spi_xfer" 1 381 "int16(int8 stream,int16 data,int8 bits)" `391 
v L "stream" 1 382 "int8" `388 
v L "data" 1 382 "int32" `389 
v L "bits" 1 382 "int8" `398 
f G "spi_xfer" 1 382 "int32(int8 stream,int32 data,int8 bits)" `395 
v L "baud" 1 383 "int32" `400 
f B "spi_init" 1 383 "void(int32 baud)" `399 
v L "stream" 1 384 "int8" `402 
v L "baud" 1 384 "int32" `403 
f G "spi_init" 1 384 "void(int8 stream,int32 baud)" `401 
v L "baud" 1 385 "int32" `405 
f B "spi_speed" 1 385 "void(int32 baud)" `404 
v L "stream" 1 386 "int8" `407 
v L "baud" 1 386 "int32" `408 
f G "spi_speed" 1 386 "void(int8 stream,int32 baud)" `406 
v L "stream" 1 387 "int8" `410 
v L "baud" 1 387 "int32" `411 
v L "clock" 1 387 "int32" `412 
f G "spi_speed" 1 387 "void(int8 stream,int32 baud,int32 clock)" `409 
v L "data" 1 388 "int8" `414 
f B "spi_prewrite" 1 388 "void(int8 data)" `413 
v L "data" 1 389 "int16" `416 
f G "spi_prewrite" 1 389 "void(int16 data)" `415 
v L "data" 1 390 "int32" `418 
f G "spi_prewrite" 1 390 "void(int32 data)" `417 
v L "??65535" 1 391 "int8" `420 
v L "data" 1 391 "int8" `421 
f G "spi_prewrite" 1 391 "void(int8 ,int8 data)" `419 
v L "??65535" 1 392 "int8" `420 
v L "data" 1 392 "int16" `424 
f G "spi_prewrite" 1 392 "void(int8 ,int16 data)" `422 
v L "??65535" 1 393 "int8" `420 
v L "data" 1 393 "int32" `427 
f G "spi_prewrite" 1 393 "void(int8 ,int32 data)" `425 
f B "spi_xfer_in" 1 394 "int8()" `428 
f G "spi_xfer_in" 1 395 "int16()" `429 
f G "spi_xfer_in" 1 396 "int32()" `430 
v L "bits" 1 397 "int8" `432 
f G "spi_xfer_in" 1 397 "int8(int8 bits)" `431 
v L "bits" 1 398 "int8" `434 
f G "spi_xfer_in" 1 398 "int16(int8 bits)" `433 
v L "bits" 1 399 "int8" `436 
f G "spi_xfer_in" 1 399 "int32(int8 bits)" `435 
v L "stream" 1 400 "int8" `438 
v L "bits" 1 400 "int8" `439 
f G "spi_xfer_in" 1 400 "int8(int8 stream,int8 bits)" `437 
v L "stream" 1 401 "int8" `438 
v L "bits" 1 401 "int8" `442 
f G "spi_xfer_in" 1 401 "int16(int8 stream,int8 bits)" `440 
v L "stream" 1 402 "int8" `438 
v L "bits" 1 402 "int8" `445 
f G "spi_xfer_in" 1 402 "int32(int8 stream,int8 bits)" `443  "#use rtos() Prototypes:"
f B "rtos_run" 1 405 "void()" `446 
f B "rtos_yield" 1 406 "void()" `447 
v L "task" 1 407 "int8" `449 
f B "rtos_enable" 1 407 "void(int8 task)" `448 
v L "task" 1 408 "int8" `451 
f B "rtos_disable" 1 408 "void(int8 task)" `450 
f B "rtos_terminate" 1 409 "void()" `452 
v L "flag" 1 410 "int8" `454 
f B "rtos_await" 1 410 "void(int8 flag)" `453 
v L "sem" 1 411 "int8" `456 
f B "rtos_wait" 1 411 "void(int8 sem)" `455 
v L "sem" 1 412 "int8" `458 
f B "rtos_signal" 1 412 "void(int8 sem)" `457 
v L "task" 1 413 "int8" `460 
v L "msg" 1 413 "int8" `461 
f B "rtos_msg_send" 1 413 "void(int8 task,int8 msg)" `459 
f B "rtos_msg_read" 1 414 "int8()" `462 
f B "rtos_msg_poll" 1 415 "int8()" `463 
v L "task" 1 416 "int8" `465 
f B "rtos_overrun" 1 416 "int8(int8 task)" `464 
v L "task" 1 417 "int8" `467 
v L "stat" 1 417 "*int8" `468 
f B "rtos_stats" 1 417 "void(int8 task,*int8 stat)" `466  "#use timer() Prototypes:"
f B "get_ticks" 1 420 "int8()" `469 
f G "get_ticks" 1 421 "int16()" `470 
f G "get_ticks" 1 422 "int32()" `471 
v L "stream" 1 423 "int8" `473 
f G "get_ticks" 1 423 "int8(int8 stream)" `472 
v L "stream" 1 424 "int8" `475 
f G "get_ticks" 1 424 "int16(int8 stream)" `474 
v L "stream" 1 425 "int8" `477 
f G "get_ticks" 1 425 "int32(int8 stream)" `476 
v L "value" 1 426 "int8" `479 
f B "set_ticks" 1 426 "void(int8 value)" `478 
v L "value" 1 427 "int16" `481 
f G "set_ticks" 1 427 "void(int16 value)" `480 
v L "value" 1 428 "int32" `483 
f G "set_ticks" 1 428 "void(int32 value)" `482 
v L "stream" 1 429 "int8" `485 
v L "value" 1 429 "int8" `486 
f G "set_ticks" 1 429 "void(int8 stream,int8 value)" `484 
v L "stream" 1 430 "int8" `485 
v L "value" 1 430 "int16" `489 
f G "set_ticks" 1 430 "void(int8 stream,int16 value)" `487 
v L "stream" 1 431 "int8" `485 
v L "value" 1 431 "int32" `492 
f G "set_ticks" 1 431 "void(int8 stream,int32 value)" `490  "#use pwm() Prototypes:"
f B "pwm_on" 1 434 "void()" `493 
v L "stream" 1 435 "int8" `495 
f G "pwm_on" 1 435 "void(int8 stream)" `494 
f B "pwm_off" 1 436 "void()" `496 
v L "stream" 1 437 "int8" `498 
f G "pwm_off" 1 437 "void(int8 stream)" `497 
v L "duty" 1 438 "int16" `500 
f B "pwm_set_duty" 1 438 "void(int16 duty)" `499 
v L "stream" 1 439 "int8" `502 
v L "duty" 1 439 "int16" `503 
f G "pwm_set_duty" 1 439 "void(int8 stream,int16 duty)" `501 
v L "percent" 1 440 "int16" `505 
f B "pwm_set_duty_percent" 1 440 "void(int16 percent)" `504 
v L "stream" 1 441 "int8" `507 
v L "percent" 1 441 "int16" `508 
f G "pwm_set_duty_percent" 1 441 "void(int8 stream,int16 percent)" `506 
v L "frequency" 1 442 "int32" `510 
f B "pwm_set_frequency" 1 442 "void(int32 frequency)" `509 
v L "stream" 1 443 "int8" `512 
v L "frequency" 1 443 "int32" `513 
f G "pwm_set_frequency" 1 443 "void(int8 stream,int32 frequency)" `511  "#use capture() Prototypes:"
f B "get_capture_time" 1 446 "int16()" `514 
v L "stream" 1 447 "int8" `516 
f G "get_capture_time" 1 447 "int16(int8 stream)" `515 
f B "get_capture_event" 1 448 "int8()" `517 
v L "stream" 1 449 "int8" `519 
f G "get_capture_event" 1 449 "int8(int8 stream)" `518  "Enviroment Prototypes:"
c L "get_capture_event" 1 5 2 "FUNCTION"
v L "address" 1 462 "int16" `521 
f B "goto_address" 1 462 "void(int16 address)" `520 
v L "label" 1 463 "int16" `523 
f B "label_address" 1 463 "int16(int16 label)" `522  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 468 "int16" `524 
v L "address" 1 473 "__EEADDRESS__" `526 
f B "read_eeprom" 1 473 "int8(__EEADDRESS__ address)" `525 
v L "address" 1 474 "__EEADDRESS__" `528 
v L "value" 1 474 "int8" `529 
f B "write_eeprom" 1 474 "void(__EEADDRESS__ address,int8 value)" `527  "INT"
c L "write_eeprom" 1 5 4 "FUNCTION"
v L "interrupt" 1 481 "int32" `531 
f B "enable_interrupts" 1 481 "void(int32 interrupt)" `530 
v L "interrupt" 1 482 "int32" `533 
f B "disable_interrupts" 1 482 "void(int32 interrupt)" `532 
v L "interrupt" 1 483 "int32" `535 
f B "clear_interrupt" 1 483 "void(int32 interrupt)" `534 
v L "interrupt" 1 484 "int32" `537 
f B "interrupt_active" 1 484 "int8(int32 interrupt)" `536 
v L "source" 1 485 "int8" `539 
v L "edge" 1 485 "int8" `540 
f B "ext_int_edge" 1 485 "void(int8 source,int8 edge)" `538 
v L "address" 1 486 "int16" `542 
f B "jump_to_irs" 1 486 "void(int16 address)" `541  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 488 "0x40"
d G "H_TO_L" 1 489 "0"
d G "GLOBAL" 1 491 "0x0BC0"
d G "PERIPH" 1 492 "0x0B40"
d G "INT_RTCC" 1 493 "0x000B20"
d G "INT_RB" 1 494 "0x00FF0B08"
d G "INT_EXT_L2H" 1 495 "0x50000B10"
d G "INT_EXT_H2L" 1 496 "0x60000B10"
d G "INT_EXT" 1 497 "0x000B10"
d G "INT_TBE" 1 498 "0x008C10"
d G "INT_RDA" 1 499 "0x008C20"
d G "INT_TIMER1" 1 500 "0x008C01"
d G "INT_TIMER2" 1 501 "0x008C02"
d G "INT_CCP1" 1 502 "0x008C04"
d G "INT_COMP" 1 503 "0x008C40"
d G "INT_TIMER0" 1 504 "0x000B20"
d G "INT_EEPROM" 1 505 "0x008C80"
C L "jump_to_irs" 0 5 1 "FUNCTION"
C L "jump_to_irs" 0 5 1 "FUNCTION"
C L "jump_to_irs" 0 5 1 "FUNCTION"
C L "jump_to_irs" 0 5 1 "FUNCTION"
C L "jump_to_irs" 0 5 1 "FUNCTION"
C L "jump_to_irs" 0 5 1 "FUNCTION"
C L "jump_to_irs" 0 5 1 "FUNCTION"
C L "jump_to_irs" 0 5 1 "FUNCTION"
C L "jump_to_irs" 0 5 1 "FUNCTION"
C L "jump_to_irs" 0 5 1 "FUNCTION"
C L "jump_to_irs" 0 5 1 "FUNCTION"
C L "jump_to_irs" 0 5 1 "FUNCTION"
C L "jump_to_irs" 0 5 1 "FUNCTION"
C L "jump_to_irs" 0 5 1 "FUNCTION"
C L "jump_to_irs" 0 5 1 "FUNCTION"
D G "RTC_SDA" 2 17 "PIN_B2"
D G "RTC_SCL" 2 18 "PIN_B3"
V L "binary_value" 2 22 "int8" `552 
F G "bin2bcd" 2 22 "int8(int8 binary_value)" `551 
V L "bcd_value" 2 23 "int8" `554 
F G "bcd2bin" 2 23 "int8(int8 bcd_value)" `553 
F G "ds1307_init" 2 26 "void()" `555 
V L "seconds" 2 27 "int8" `556 
C L "ds1307_init" 2 2 1 "FUNCTION"
C L "ds1307_init" 2 2 1 "FUNCTION"
C L "ds1307_init" 2 2 1 "FUNCTION"
C L "ds1307_init" 2 2 1 "FUNCTION"
C L "ds1307_init" 2 2 1 "FUNCTION"
C L "ds1307_init" 2 2 1 "FUNCTION"
C L "ds1307_init" 2 2 1 "FUNCTION"
C L "ds1307_init" 2 2 1 "FUNCTION"
C L "ds1307_init" 2 2 1 "FUNCTION"
C L "ds1307_init" 2 2 1 "FUNCTION"
V L "day" 2 52 "int8" `558 
V L "mth" 2 52 "int8" `559 
V L "year" 2 52 "int8" `560 
V L "dow" 2 52 "int8" `561 
V L "hr" 2 52 "int8" `562 
V L "min" 2 52 "int8" `563 
V L "sec" 2 52 "int8" `564 
F G "ds1307_set_date_time" 2 53 "void(int8 day,int8 mth,int8 year,int8 dow,int8 hr,int8 min,int8 sec)" `557 
C L "ds1307_set_date_time" 2 2 1 "FUNCTION"
C L "ds1307_set_date_time" 2 2 1 "FUNCTION"
C L "ds1307_set_date_time" 2 2 1 "FUNCTION"
C L "ds1307_set_date_time" 2 2 1 "FUNCTION"
C L "ds1307_set_date_time" 2 2 1 "FUNCTION"
C L "ds1307_set_date_time" 2 2 1 "FUNCTION"
C L "ds1307_set_date_time" 2 2 1 "FUNCTION"
C L "ds1307_set_date_time" 2 2 1 "FUNCTION"
C L "ds1307_set_date_time" 2 2 1 "FUNCTION"
C L "ds1307_set_date_time" 2 2 1 "FUNCTION"
V L "day" 2 71 "int8" `566 
V L "mth" 2 71 "int8" `567 
V L "year" 2 71 "int8" `568 
V L "dow" 2 71 "int8" `569 
F G "ds1307_get_date" 2 72 "void(int8 day,int8 mth,int8 year,int8 dow)" `565 
C L "ds1307_get_date" 2 2 1 "FUNCTION"
C L "ds1307_get_date" 2 2 1 "FUNCTION"
C L "ds1307_get_date" 2 2 1 "FUNCTION"
C L "ds1307_get_date" 2 2 1 "FUNCTION"
C L "ds1307_get_date" 2 2 1 "FUNCTION"
V L "hr" 2 85 "int8" `571 
V L "min" 2 85 "int8" `572 
V L "sec" 2 85 "int8" `573 
F G "ds1307_get_time" 2 86 "void(int8 hr,int8 min,int8 sec)" `570 
C L "ds1307_get_time" 2 2 1 "FUNCTION"
V L "binary_value" 2 99 "int8" `575 
F G "bin2bcd" 2 100 "int8(int8 binary_value)" `551 
V L "temp" 2 101 "int8" `574 
V L "retval" 2 102 "int8" `575 
C L "bin2bcd" 2 2 2 "FUNCTION"
C L "bin2bcd" 2 2 1 "FUNCTION"
C L "bcd2bin" 2 2 1 "FUNCTION"
V L "bcd_value" 2 128 "int8" `577 
F G "bcd2bin" 2 129 "int8(int8 bcd_value)" `553 
V L "temp" 2 130 "int8" `576 
C L "bcd2bin" 2 2 1 "FUNCTION"
C L "bcd2bin" 2 2 1 "FUNCTION"
C L "bcd2bin" 2 2 1 "FUNCTION"
D G "ONE_WIRE_PIN" 3 1 "PIN_A4"
F G "onewire_reset" 3 4 "void()" `577 
C L "onewire_reset" 3 6 1 "FUNCTION"
C L "onewire_reset" 3 6 1 "FUNCTION"
C L "onewire_reset" 3 6 1 "FUNCTION"
V L "data" 3 12 "int8" `579 
F G "onewire_write" 3 13 "void(int8 data)" `578 
V L "count" 3 14 "int8" `580 
C L "onewire_write" 3 6 1 "FUNCTION"
C L "onewire_write" 3 6 1 "FUNCTION"
C L "onewire_write" 3 6 1 "FUNCTION"
C L "onewire_write" 3 6 1 "FUNCTION"
C L "onewire_write" 3 6 1 "FUNCTION"
F G "onewire_read" 3 27 "int8()" `581 
V L "count" 3 28 "int8" `582 
V L "data" 3 28 "int8" `583 
C L "onewire_read" 3 6 1 "FUNCTION"
C L "onewire_read" 3 6 1 "FUNCTION"
C L "onewire_read" 3 6 1 "FUNCTION"
C L "onewire_read" 3 6 1 "FUNCTION"
C L "onewire_read" 3 6 1 "FUNCTION"
F G "ds1820_read" 3 42 "float()" `584 
V L "busy" 3 43 "int8" `585 
V L "temp1" 3 43 "int8" `586 
V L "temp2" 3 43 "int8" `587 
V L "temp3" 3 44 "sint16" `588 
V L "result" 3 45 "float" `589 
D G "OE" 0 24 "pin_b6"
D G "A" 0 25 "pin_b5"
D G "B" 0 26 "pin_b4"
D G "CLK" 0 27 "pin_a2"
D G "LE" 0 28 "pin_a3"
D G "RI1" 0 29 "pin_b7"
D G "RI2" 0 30 "pin_a1"
D G "RI3" 0 31 "pin_a0"
D G "SET" 0 32 "pin_b0"
D G "UP" 0 33 "pin_b1"
V G "sec" 0 35 "int8" `595 
V G "min" 0 35 "int8" `596 
V G "hrs" 0 35 "int8" `597 
V G "day" 0 35 "int8" `598 
V G "month" 0 35 "int8" `599 
V G "yr" 0 35 "int8" `600 
V G "dow" 0 35 "int8" `601 
V G "temperature" 0 36 "sint8" `602 
V G "clkDots" 0 38 "int1" `603 
V G "dateDots" 0 39 "int1" `604 
V G "clkMode" 0 41 "int8" `605 
V G "dispCnt" 0 43 "int8" `606 
V G "numData" 0 45 "int8[16]" `607 
V G "numbers" 0 47 "int8[4]" `608 
V G "nm" 0 48 "int8" `609 
V G "mode" 0 50 "int16" `610 
V G "clkSep" 0 51 "int1" `611 
V G "tmpRead" 0 52 "int1" `612 
V G "editMode" 0 54 "int8" `613 
V G "editCnt" 0 55 "int8" `614 
V G "scan" 0 56 "int8" `615 
V G "setNum" 0 58 "int8[12]" `616 
V G "setCnt" 0 59 "int8" `617 
V G "scrCnt" 0 60 "int8" `618 
V G "shift" 0 62 "int1" `619 
V G "setMax" 0 63 "int8" `620 
F G "clock" 0 66 "void()" `621 
F G "latchEnable" 0 72 "void()" `622 
V L "outputData1" 0 77 "int8" `624 
F G "write274HC595" 0 78 "void(int8 outputData1)" `623 
V L "i" 0 79 "int8" `625 
V L "outputData1" 0 98 "int8" `627 
V L "outputData2" 0 98 "int8" `628 
V L "mode" 0 98 "int8" `629 
F G "write274HC595" 0 99 "void(int8 outputData1,int8 outputData2,int8 mode)" `626 
V L "l" 0 102 "int8" `630 
V L "i" 0 109 "int8" `631 
V L "outputData1" 0 139 "int8" `633 
V L "outputData2" 0 139 "int8" `634 
V L "outputData3" 0 139 "int8" `635 
V L "mode" 0 139 "int8" `636 
F G "write274HC595" 0 140 "void(int8 outputData1,int8 outputData2,int8 outputData3,int8 mode)" `632 
V L "l" 0 143 "int8" `637 
V L "l" 0 153 "int8" `638 
V L "l" 0 163 "int8" `639 
V L "i" 0 171 "int8" `640 
V L "line" 0 213 "int8" `642 
F G "createNumber" 0 214 "void(int8 line)" `641 
V L "k" 0 215 "int8" `643 
V L "o" 0 219 "int8" `644 
V L "m" 0 226 "int8" `645 
C L "createNumber" 0 38 1 "FUNCTION"
V L "j" 0 269 "int8" `646 
C L "createNumber" 0 38 1 "FUNCTION"
V L "j" 0 279 "int8" `647 
C L "createNumber" 0 38 1 "FUNCTION"
V L "j" 0 295 "int8" `648 
F G "getTime" 0 320 "void()" `649 
V L "md" 0 325 "int8" `651 
F G "show" 0 326 "void(int8 md)" `650 
F G "timer0_kesme" 0 415 "void()" `661 
C L "timer0_kesme" 0 38 1 "FUNCTION"
V L "hour" 0 509 "int8" `664 
V L "minute" 0 509 "int8" `665 
V L "day" 0 509 "int8" `666 
V L "month" 0 509 "int8" `667 
V L "year" 0 509 "int8" `668 
F G "setTime" 0 510 "void(int8 hour,int8 minute,int8 day,int8 month,int8 year)" `663 
F G "setNumbers" 0 515 "void()" `669 
F G "btnDelay" 0 531 "void()" `670 
V L "n" 0 532 "int16" `671 
F G "readSizeSettings" 0 539 "void()" `672 
F G "writeSizeSettings" 0 544 "void()" `673 
F G "readSetButton" 0 549 "void()" `674 
F G "readUpButton" 0 672 "void()" `679 
F G "MAIN" 0 709 "void()" `680 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_oscillator" 0 2
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
